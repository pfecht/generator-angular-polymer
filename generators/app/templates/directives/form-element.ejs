@Directive({
  selector: "<%= name %>",
 /* providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => FormElementDirective),
      multi: true
    }
  ],*/
  host: <%- (isCheckedElement ? "{ '(checkedChange)': 'onValueChanged($event)' }" : "{ '(valueChange)': 'onValueChanged($event)' }") %>
})
export class <%= nameCamelCase %>FormElementDirective {
  private _element:any;
  constructor(private _renderer: Renderer, el: ElementRef) {
    this._element = el.nativeElement;
    this._element.addEventListener('blur', () => this.onTouched(), true);
  }

  onChange(_: any) { }
  onTouched() { }

  writeValue(value: any): void {
    this._renderer.setElementProperty(this._element, <%- (isCheckedElement ? '"checked"' : '"value"') %>, value);
  }

  registerOnChange(fn: (_: any) => void): void { this.onChange = fn; }
  registerOnTouched(fn: () => void): void { this.onTouched = fn; }

  onValueChanged(value: any) {
    this.onChange(value);
  }
}