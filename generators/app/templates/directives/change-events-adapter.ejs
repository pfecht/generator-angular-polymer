@Directive({
  selector: "<%= name %>",
  host:  {
    <% propertiesWithNotify.forEach((property) => { -%>
      <%- "'(" + property + "-changed)': '_emitChangeEvent(\"" + property + "\", $event)'," %>
    <% }) -%>
  }
})
export class <%= nameCamelCase %>ChangeEventsAdapterDirective {
    <% propertiesWithNotify.forEach((property) => { %>
      <%- "@Output() " + property + "Change = new EventEmitter<any>(false)" -%>
    <% }); %>
    constructor() {}

    _emitChangeEvent(property: string, event: any) {
      // Event is a notification for a sub-property when `path` exists and the
      // event.detail.value holds a value for a sub-property.

      // For sub-property changes we don't need to explicitly emit events,
      // since all interested parties are bound to the same object and Angular
      // takes care of updating sub-property bindings on changes.
      if (!event.detail.path) {
        this[`${property}Change`].emit(event.detail.value);
      }
    }
};